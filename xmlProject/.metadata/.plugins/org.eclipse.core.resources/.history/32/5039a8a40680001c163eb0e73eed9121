package XMLWritingTool;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import XmlBlockGame.Music;
import XmlBlockGame.XMLReader;

/**
 * 제작한 게임 화면 Panel
 * 
 * @author 김경미
 */
public class GameGroundPanel extends JPanel {
	private Image bgImg = null, attackImg = null;
	private WritingUser user = null;
	private WritingAttack attack = null;
	private Music music = null;
	private WritingBlock block[] = new WritingBlock[10000];
	private WritingBlock moveBlock =  null; 
	private int blockCount = 0;
	private boolean mouseClick = false, removeClick = false;
	/**
	 * GameGroundPanel 생성자
	 * @param music 배경 음악
	 */
	public GameGroundPanel(Music music) {
		setLayout(null);
		this.music = music;
	}
	/**
	 * user과 attack 설정 함수
	 */
	public void setUserAndAttack() {
		user =  new WritingUser(this.getWidth()/2 - (60/2), this.getHeight()-60,60,60);
		user.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseEntered(MouseEvent e) {//마우스가 해당 컴포넌트 영역 안에 있을 때
				((WritingUser)e.getSource()).setImg(1);
			}
			@Override
			public void mouseExited(MouseEvent e) {
				((WritingUser)e.getSource()).setImg(0);
			}
		});
		add(user);
		attack = new WritingAttack(user.getX()+user.getWidth()/2,user.getY()-20);
		add(attack);
		addMouseMotionListener(new MouseMotionAdapter() {
			@Override
			public void mouseMoved(MouseEvent e) {
				if(mouseClick) {
					moveBlock.setLocation(e.getX() , e.getY());
				}
			}
		});
	}
	/**
	 * xmlObj에 따라 게임 화면에 변화를 주는 것일 경우 변화시키는 함수
	 * @param xmlObj xmlObj
	 */
	public void setGroundPanel(XmlString xmlObj) {
		if(xmlObj.equalsObjName("GameBg")) {
			setBackGroundImage(xmlObj.getObj());
		}
		else if(xmlObj.equalsObjName("AttackImg")) {
			setAttackImg(xmlObj.getObj());
		}
		else if(xmlObj.equalsObjName("UserImg")) {
			setUserImg(xmlObj.getObj());
		}
		else if(xmlObj.equalsObjName("attackImg")) {
			setAttackingImg(xmlObj.getObj());
		}
		else if(xmlObj.equalsObjName("backGroundSound")) {
			music.play(xmlObj.getObj());
		}
	}
	/**
	 * 배경이미지 바꾸는 함수
	 * @param bgName 배경 이미지 파일 이름
	 */
	private void setBackGroundImage(String bgName) {
		ImageIcon BgIcon = new ImageIcon(bgName);
		bgImg = BgIcon.getImage();
		repaint();
	}
	/**
	 * 어택 이미지 바꾸는 함수
	 * @param imgName 이미지 파일 이름
	 */
	private void setAttackImg(String imgName) {
		attack.setImage(imgName);
	}
	/**
	 * 유저 이미지 바꾸는 함수
	 * @param imgName 이미지 파일 이름
	 */
	private void setUserImg(String imgName) {
		user.setUserImg(imgName);
	}
	/**
	 * 유저가 공격할 때 이미지 바꾸는 함수
	 * @param imgName 이미지 파일 이름
	 */
	private void setAttackingImg(String imgName) {
		user.setAttackingImg(imgName);
	}
	/**
	 * removeClick 설정하는 함수
	 * @param removeClick removeClick를 변경하는 값
	 */
	public void setRemoveClick(boolean removeClick) { removeClick = this.removeClick; }
	/**
	 * removeClick을 리턴하는 함수
	 * @return removeClick 리턴
	 */
	public boolean getRemoveClick() { return removeClick; }
	/**
	 * user 사이즈 설정하는 함수
	 * @param w user 넓이
	 * @param h user 높이
	 */
	public void setUserSize(int w,int h) {
		if(w==-1)
			w = user.getWidth();
		if(h==-1)
			h = user.getHeight();
		user.setSize(w,h);
		user.setLocation(this.getWidth()/2 - (w/2), this.getHeight()-h);
		attack.setLocation(user.getX()+user.getWidth()/2,user.getY()-20);
	}
	/**
	 * GameGroundPanel의 크기가 변화했을 때 groundPanel 
	 * 속 component 위치 설정하는 함수
	 */
	public void setGroundSize() {
		if(user == null) return;
		user.setLocation(this.getWidth()/2 - (user.getWidth()/2), this.getHeight()-user.getHeight());
		attack.setLocation(user.getX()+user.getWidth()/2,user.getY()-20);
	}
	/**
	 * user 위치 리턴하는 함수
	 * @return user Size 리턴
	 */
	public Dimension getUserSize()  { return user.getSize(); }
	/**
	 * 블록을 삭제하는 함수
	 * @param removeBlock 삭제하고자 하는 블록
	 */
	public void removeBlock(WritingBlock removeBlock) {
		int i=0;
		for(i=0;i<blockCount;i++) {
			if(block[i]!=null && block[i].equals(removeBlock))
				break;
		}
		if(blockCount==i)
			return;
		remove(block[i]);
		block[i] = null;
		repaint();
	}
	/**
	 * 블록을 추가하는 함수
	 * @param WritingBlock 추가하고자 하는 블록
	 */
	public void addBlock(WritingBlock addBlock) {
		block[blockCount] = addBlock.blockCopy();
		block[blockCount].setLocation(10,10);
		add(block[blockCount]);
		repaint();
		
		block[blockCount].addMouseListener(new BlockMouseAdapter());
		blockCount++;
	}
	/**
	 * xml을 수정하는 경우에 사용<br>
	 * xml에서 파일을 읽어 설정된 정보를 패널에 표시하는 함수
	 * @param gamePanelNode 정보를 얻기 위한 xml Node
	 */
	public void setXmlBlock(Node gamePanelNode) {
		//block 설정
		Node blockNode = XMLReader.getNode(gamePanelNode, XMLReader.E_BLOCK);
		NodeList nodeList = blockNode.getChildNodes();
		for(int i=0; i<nodeList.getLength(); i++) {
			Node node = nodeList.item(i);
			if(node.getNodeType() != Node.ELEMENT_NODE)
				continue;
			// found!!, <Obj> tag
			
			if(node.getNodeName().equals(XMLReader.E_OBJ)) {
				block[blockCount] = new WritingBlock();
				
				int x = Integer.parseInt(XMLReader.getAttr(node, "x"));
				int y = Integer.parseInt(XMLReader.getAttr(node, "y"));
				block[blockCount].setLocation(x,y);
				int w = Integer.parseInt(XMLReader.getAttr(node, "w"));
				int h = Integer.parseInt(XMLReader.getAttr(node, "h"));
				
				block[blockCount].setImg(XMLReader.getAttr(node, "img"));
				block[blockCount].setSize(w,h);
				int blockDown = Integer.parseInt(XMLReader.getAttr(node, "blockDown"));
				block[blockCount].setMoveDownBlock(blockDown);
				
				String type = XMLReader.getAttr(node, "type");
				
				if(type.equals("move") || type.equals("moveAndGone")) {
					int moveDelay = Integer.parseInt(XMLReader.getAttr(node, "moveDelay"));
					int moveDirection = Integer.parseInt(XMLReader.getAttr(node, "moveDirection"));
					block[blockCount].setMoveSideBlock(moveDelay, moveDirection);
				}
				if(type.equals("gone") || type.equals("moveAndGone")) {
					int score = Integer.parseInt(XMLReader.getAttr(node, "score"));
					int hitCount  = Integer.parseInt(XMLReader.getAttr(node, "hitCount"));
					block[blockCount].setGoneBlock(hitCount, score);
				}
				block[blockCount].addMouseListener(new BlockMouseAdapter());
				add(block[blockCount]);
				repaint();
				
				blockCount++;
			}
		}
	}
	/**
	 * 파일을 저장할 때 파일에 tool을 이용해 설정된 것들을 입력하는 함수
	 * @param file 저장할 파일 이름
	 */
	public void xmlBlockWriting(File file) {
		try{
			FileOutputStream fw = new FileOutputStream(file, true); // true는 원래 있던 txt 파일에 이어서쓰기 위해 존재 
			BufferedWriter bufferedWriter =new BufferedWriter(new OutputStreamWriter(fw, "utf-8"));
            if(file.isFile() && file.canWrite()){
                //쓰기
                bufferedWriter.write("        <Block>\r\n");
                for(int i=0;i<blockCount;i++) {
                	if(block[i]!=null)
                		bufferedWriter.write("                "+block[i].getString());
                }
                bufferedWriter.write(
                		  "        </Block>\r\n"
                		+ "    </GamePanel>\r\n"
                		+ "</BlockGame>");
                bufferedWriter.flush();
                bufferedWriter.close();
            }
        }catch (IOException e) {
            return;
        }
	}
	@Override
	public void setSize(int w,int h) {
		super.setSize(w, h);
	}
	@Override
	public void paintComponent(Graphics g) { //call back 함수
		super.paintComponent(g); // 패널을 모두 지운다 -> 배경색을 칠한다
		g.drawImage(bgImg, 0,0, this.getWidth(), this.getHeight(), null);
	}
	/**
	 * block MouseAdapter<br>
	 *  : 클릭했을 경우 위치 이동 가능 다시 클릭 시 고정, 두 번 클릭 시 block설정 창
	 * 
	 * @author 김경미
	 */
	public class BlockMouseAdapter extends MouseAdapter {
		@Override
		public void mouseClicked(MouseEvent e) { 
			if(removeClick) {
				removeBlock(((WritingBlock)e.getSource()));
			}
			if(e.getClickCount() == 2) {
				BlockSetDialog blockSetDialog = new BlockSetDialog((WritingBlock) e.getSource());
				blockSetDialog.setVisible(true);
				mouseClick = false;
			}
			else if(!mouseClick) {
				mouseClick = true;
				moveBlock = (WritingBlock) e.getSource();
				((JPanel)moveBlock.getParent()).setFocusable(true);
				((JPanel)moveBlock.getParent()).requestFocus();
			}
			else
				mouseClick = false;
		}	
	}
}
/**
 * 게임의 user 캐릭터 작성을 위한 이미지레이블 (extends JLabel)
 * 
 * @author 김경미
 */
class WritingUser extends JLabel {
	Image img[] = new Image[2];
	int imgSelect = 0;
	int w= 60 ,h= 60;
	/**
	 * WritingUser 생성자
	 * 
	 * @param x user 이미지 위치 x값
	 * @param y user 이미지 위치 y값
	 * @param w user 이미지 넓이
	 * @param h user 이미지 높이
	 */
	public WritingUser(int x, int y, int w, int h) {
		this.setBounds(x,y,w,h);
	}
	/**
	 * user의 이미지 변화 함수
	 * @param imgName user이미지 파일 이름
	 */
	public void setUserImg(String imgName) {
		ImageIcon icon = new ImageIcon(imgName);
		img[0] = icon.getImage();
		getParent().repaint();
		imgSelect = 0;
	}
	/**
	 * user이 공격할 때 이미지 변화 함수
	 * @param imgName user이미지 파일 이름
	 */
	public void setAttackingImg(String imgName) {
		ImageIcon icon = new ImageIcon(imgName);
		img[1] = icon.getImage();
		if(img[0]==null);
			imgSelect = 1;
		getParent().repaint();
	}
	/**
	 * 이미지 변환해주는 함수
	 * 
	 * @param i i가 0일 때는 공격하지 않을 때 이미지로 변환 i가 1일 때는 공격할 때 이미지로 변환
	 */
	public void setImg(int i) {
		imgSelect = i;
		repaint();
	}
	@Override
	public void setSize(int w,int h) {
		this.w = w; this.h = h;
		super.setSize(this.w, this.h);
	}
	@Override
	public void paintComponent(Graphics g) {
		g.drawImage(img[imgSelect], 0, 0, this.getWidth(), this.getHeight(), this);
	}		
}
/**
 * 게임의 attack(공격 볼) 작성을 위한 이미지레이블 (extends JLabel)
 * 
 * @author 김경미
 */
class WritingAttack extends JLabel {
	Image img = null;
	/**
	 * WritingAttack 생성자
	 * 
	 * @param x attack 이미지 위치 x값
	 * @param y attack 이미지 위치 y값
	 */
	public WritingAttack(int x, int y) {
		this.setBounds(x,y,20,20);
	}
	/**
	 * 어택 이미지 변환해주는 함수
	 * @param imgName attack 이미지 파일 이름
	 */
	public void setImage(String imgName) {
		ImageIcon icon = new ImageIcon(imgName);
		img = icon.getImage();
		getParent().repaint();
	}
	@Override
	public void paintComponent(Graphics g) {
		g.drawImage(img, 0, 0, this.getWidth(), this.getHeight(), this);
	}		
}
