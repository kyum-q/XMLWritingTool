package XMLWritingTool;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import javax.swing.event.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import XmlBlockGame.Music;
import XmlBlockGame.XMLReader;

/**
 * Block 게임제작 Frame을 설정하는 class
 * 
 * @author 김경미
 */
public class XmlWritingToolsFrame extends JFrame {
	private File file = null;
	private XMLReader xml = null;
	private BasicToolsPanel basicPanel = null;
	private GameGroundPanel groundPanel = null;
	private BlockToolsPanel blockToolsPanel = null;
	private MusicToolsPanel musicToolsPanel = null;
	private GameInitToolsPanel initToolsPanel = new GameInitToolsPanel();
	private FileDialog fileDialog = new FileDialog(this,"save file set");
	private JFrame frame;
	
	private Music music = new Music();
	private XmlString gameBgObj = null;

	private int width, height;
	private String fileName;
	
	private JSplitPane hPane = new JSplitPane();
	private JTabbedPane pane = new JTabbedPane();
	
	private JSlider xSlider = null, ySlider = null;
	/**
	 * XmlWritingToolsFrame 생성자
	 */
	public XmlWritingToolsFrame() {
		width=600; height=500;
		xSlider = new JSlider(JSlider.HORIZONTAL, 100, 600, 600);
		ySlider = new JSlider(JSlider.HORIZONTAL, 100, 500, 500);
		setWritingToolsFrame();
	}
	/**
	 * XmlWritingToolsFrame 생성자
	 * @param filePath xml 파일 이름 문자열
	 */
	public XmlWritingToolsFrame(String filePath) {
		xml = new XMLReader(filePath); // XMLReader 생성 -> XML을 읽어와라
		Node blockGameNode = xml.getBlockGameElement(); 
		Node sizeNode = XMLReader.getNode(blockGameNode, XMLReader.FRAME_SIZE);
		int w = Integer.parseInt(XMLReader.getAttr(sizeNode, "w"));
		int h = Integer.parseInt(XMLReader.getAttr(sizeNode, "h"));
		this.width = w;
		this.height = h;
		if(width>600)
			width = 600;
		if(height>500)
			height = 500;
		if(width<100)
			width = 100;
		if(height<100)
			height = 100;
		xSlider = new JSlider(JSlider.HORIZONTAL, 100, 600, width);
		ySlider = new JSlider(JSlider.HORIZONTAL, 100, 500, height);
		setWritingToolsFrame();
		setXml();
	}
	/**
	 * xml 파일을 수정할 경우 모든 패널을 xml 파일에 맞춰서 설정하는 함수
	 */
	private void setXml() {
		Node bgNode = XMLReader.getNode(xml.getGamePanelElement(), XMLReader.GAME_BG);
		gameBgObj.setObj(bgNode.getTextContent());
		groundPanel.setXmlBlock(xml.getGamePanelElement());
		basicPanel.setXmlBasic(xml.getGamePanelElement());
		musicToolsPanel.setXmlMusic(xml.getSoundElement());
		initToolsPanel.setXmlInit(xml.getInitPanelElement());
	}
	/**
	 * 기본 component 설정 함수
	 */
	private void setWritingToolsFrame() {
		frame = this;
		setSize(912,586);
		
		groundPanel = new GameGroundPanel(music);
		basicPanel = new BasicToolsPanel(groundPanel);
		blockToolsPanel = new BlockToolsPanel(groundPanel);
		musicToolsPanel = new MusicToolsPanel(groundPanel);
		gameBgObj = new XmlString("GameBg", groundPanel, 0);
		
		pane.addTab("Basic",basicPanel);
		pane.addTab("Music",musicToolsPanel);
		pane.addTab("Block",blockToolsPanel);
		pane.addTab("Init",initToolsPanel);
		
		makeToolBar();
		setGroundPanel(width,height);
		setLocationRelativeTo(null);
		setResizable(false); // 창크기 고정 (수정 불가)
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Frame 창 닫으면 종료시키기
		setVisible(true);
		groundPanel.setUserAndAttack();
	}
	/**
	 * 게임화면 패널을 수정해주는 함수
	 * @param w 게임화면 패널 넓이
	 * @param h 게임화면 패널 높이
	 */
	private void setGroundPanel(int w, int h) {
		getContentPane().add(hPane, BorderLayout.CENTER);
		
		hPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
		hPane.setDividerLocation(601);
		hPane.setEnabled(false); // splitPane 위치 고정
		hPane.setDividerSize(0);
		
		JSplitPane topPane = new JSplitPane();
		topPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
		topPane.setDividerLocation(250-h/2);
		topPane.setEnabled(false); // splitPane 위치 고정
		topPane.setDividerSize(0);
		topPane.setBorder(null);
		
		JSplitPane leftPane = new JSplitPane();
		leftPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
		leftPane.setDividerLocation(300-w/2);
		leftPane.setEnabled(false); // splitPane 위치 고정
		leftPane.setDividerSize(0);
		leftPane.setBorder(null);
		
		JSplitPane rightPane = new JSplitPane();
		rightPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
		rightPane.setDividerLocation(w);
		rightPane.setEnabled(false); // splitPane 위치 고정
		rightPane.setDividerSize(0);
		rightPane.setBorder(null);
		
		JSplitPane bottomPane = new JSplitPane();
		bottomPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
		bottomPane.setDividerLocation(h);
		bottomPane.setEnabled(false); // splitPane 위치 고정
		bottomPane.setDividerSize(0);
		bottomPane.setBorder(null);
		
		bottomPane.setTopComponent(groundPanel);
		bottomPane.setBottomComponent(new BackGroundPanel());
		
		rightPane.setRightComponent(new BackGroundPanel());
		rightPane.setLeftComponent(bottomPane);
		
		leftPane.setRightComponent(rightPane);
		leftPane.setLeftComponent(new BackGroundPanel());
		
		topPane.setTopComponent(new BackGroundPanel());
		topPane.setBottomComponent(leftPane);
		
		hPane.setRightComponent(pane);
		hPane.setLeftComponent(topPane);
		
		groundPanel.setGroundSize();
	}
	/**
	 * ToolBar를 생성하는 함수<br>
	 * 
	 * (메뉴 기능 : 파일 열기, 저장/ BGM on, off/ 배경화면 설정/ 블록 지우기 )
	 */
	private void makeToolBar() {
		JToolBar tBar = new JToolBar();

		JButton openBtn = new JButton("FileOpen");
		JButton saveBtn = new JButton("SAVE");
		JButton bgmBtn = new JButton("BGM on/off");
		JButton gameBgBtn = new JButton("BackGround");
		JButton removeBtn = new JButton("Remove");
		
		saveBtn.setToolTipText("파일 저장");
		gameBgBtn.setToolTipText("게임의 배경이미지 선택");
		removeBtn.setToolTipText("누른 뒤 블럭을 클릭하면 블럭이 삭제됩니다");
		
		tBar.add(openBtn);
		
		tBar.add(saveBtn);
		tBar.addSeparator();
		tBar.add(bgmBtn);
		tBar.addSeparator();
		tBar.add(gameBgBtn);
		tBar.addSeparator();
		tBar.add(removeBtn);
		tBar.addSeparator();
		
		xSlider.setPaintLabels(true);
		xSlider.setPaintTicks(true);
		xSlider.setPaintTrack(true);
		xSlider.setOpaque(false);
		xSlider.setMajorTickSpacing(100);
		xSlider.setMinorTickSpacing(50); 
		xSlider.setToolTipText("게임 패널의 넓이 값");
		xSlider.addChangeListener(new ChangeListener(){
	    @Override
	    	public void stateChanged(ChangeEvent e) {
	    		JSlider source=(JSlider)e.getSource();
	    		int val = (int) source.getValue();
	    		width = val;
	    		setGroundPanel(width,height);
	    	}
	    });
	    tBar.add(xSlider);
	    tBar.addSeparator();
	    
	    ySlider.setPaintLabels(true);
	    ySlider.setPaintTicks(true);
	    ySlider.setPaintTrack(true);
	    ySlider.setOpaque(false);
	    ySlider.setMajorTickSpacing(100);
	    ySlider.setMinorTickSpacing(50); 
	    ySlider.setToolTipText("게임 패널의 높이 값");
	    ySlider.addChangeListener(new ChangeListener(){
	    @Override
	    	public void stateChanged(ChangeEvent e) {
	    		JSlider source=(JSlider)e.getSource();
	    		int val = (int) source.getValue();
	    		height = val;
	    		setGroundPanel(width,height);
	    	}
	    });
	    tBar.add(ySlider);
	    tBar.addSeparator();
	    tBar.addSeparator();
		getContentPane().add(tBar,BorderLayout.NORTH); // 무조건 BorderLayout이어야한다
		
		
		openBtn.addActionListener(new ActionListener() {
			private JFileChooser chooser;
			public void actionPerformed(ActionEvent e) {
				chooser = new JFileChooser();
				chooser.setCurrentDirectory(new File("C:\\Users\\user\\OneDrive\\바탕 화면\\동계 학습 프로젝트\\xmlProject"));
				FileNameExtensionFilter filter = 
						new FileNameExtensionFilter("xml", "xml");
				chooser.setFileFilter(filter);
				
				int ret = chooser.showOpenDialog(null);
				if(ret != JFileChooser.APPROVE_OPTION) {
					JOptionPane.showMessageDialog(null, "파일을 선택하지 않았습니다.",
							"경고",JOptionPane.WARNING_MESSAGE);
					return;
				}
				String filePath = chooser.getSelectedFile().getPath();
				if(music!=null)
					music.stop();
				new XmlWritingToolsFrame(filePath);
				dispose();
			}
		});
		
		bgmBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) { 
				if(music.checkMusicState()) {
					music.stop();
					music.setMusicState(false);
				}
				else
					music.play();
			}	
		});
		gameBgBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				SelectImageDialog selectImageFrame = new SelectImageDialog(gameBgObj, 
						((JButton)e.getSource()).getX()+frame.getX(),55+frame.getY());			
			}
		});
		removeBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) { 
				if(groundPanel.getRemoveClick()) {
					groundPanel.setRemoveClick(false);
					((JButton)e.getSource()).setBackground(null);
				}
				else {
					groundPanel.setRemoveClick(true);
					((JButton)e.getSource()).setBackground(Color.lightGray);
				}
			}	
		});
		saveBtn.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) { 
				String check = checkAllObj();
				if(check.equals(" ")) {
					fileDialog.setVisible(true);
					
					fileName = fileDialog.getFileName();
					
					if(fileName==null)
						return;
					
					writingXml();
					JOptionPane.showMessageDialog(groundPanel,"저장되었습니다",
							"Save",JOptionPane.INFORMATION_MESSAGE);
				}
				else
					JOptionPane.showMessageDialog(groundPanel,check+"이 제대로 작성되지 않았습니다",
							"Dont Save",JOptionPane.ERROR_MESSAGE);
			}	
		});
	}
	/**
	 * 저장전 각 패널의 게임 제작에 필요한 설정이 다 되었는지 확인하는 함수
	 * @return 필요한 설정이 모두 되어있으면 " " 아니면 설정이 충족되지 않은 패널 문자열 리턴
	 */
	private String checkAllObj() {
		if(gameBgObj.getObj() == null)
			return "BackGround";
		if(basicPanel.checkBasicXml())
			return "Basic";
		if(musicToolsPanel.checkMusicXml())
			return "BGM";
		if(initToolsPanel.checkInitXml())
			return "Init";	
		return " ";
	}
	/**
	 * 각 패널이 담당하는 부분을 xml 파일에 작성하는 함수
	 */
	private void writingXml() {
		file = new File(fileName);
		try{
            //파일 객체 생성
            
			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
            
            if(file.isFile() && file.canWrite()){
                //쓰기
                bufferedWriter.write("<?xml version=\"1.0\" encoding=\"utf-8\" ?> \r\n"
                		+ "\r\n"
                		+ "<BlockGame>\r\n"
                		+ "    <Screen>\r\n"
                		+ "        <Size w=\""+width+"\" h=\""+height+"\"/>\r\n"
                		+ "    </Screen>\r\n");
                bufferedWriter.close();
            }
        }catch (IOException e) {
            return;
        }
		initToolsPanel.xmlInitWriting(file);
		musicToolsPanel.xmlMusicWriting(file);
		basicPanel.xmlBasicWriting(gameBgObj, file);
		groundPanel.xmlBlockWriting(file);
	}
	public static void main(String [] args) {
		new XmlWritingToolsFrame();
	}
	private class BackGroundPanel extends JPanel {
		public BackGroundPanel() {
			this.setBackground(Color.gray);
		}
	}
}
class NumberField extends JTextField implements KeyListener {
	private static final long serialVersionUID = 1;
	 
	public NumberField() {
		super();
		super.setText("0");
		super.setHorizontalAlignment(JTextField.CENTER);
		addKeyListener(this);
	}
	public NumberField(int i) {
		super(i);
		super.setText("0");
		super.setHorizontalAlignment(JTextField.CENTER);
		addKeyListener(this);
	}
	public void setText(int i) {
		super.setText(Integer.toString(i));
	}
	public void keyPressed(KeyEvent e) {}

	public void keyReleased(KeyEvent e) {}

	 public void keyTyped(KeyEvent e) {
		 char c = e.getKeyChar();
		 
		 if (!Character.isDigit(c)) {
			 e.consume();
			 return;
		 }
	 }
	 public int getNumber() {
		 return Integer.parseInt(super.getText());
	 }
}
